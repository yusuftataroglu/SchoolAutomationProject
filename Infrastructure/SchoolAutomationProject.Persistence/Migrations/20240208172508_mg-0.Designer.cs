// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolAutomationProject.Persistence.Contexts;

#nullable disable

namespace SchoolAutomationProject.Persistence.Migrations
{
    [DbContext(typeof(SchoolAutomationProjectDbContext))]
    [Migration("20240208172508_mg-0")]
    partial class mg0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.CrossTables.ClassroomMainCourse", b =>
                {
                    b.Property<Guid>("ClassroomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MainCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClassroomId", "MainCourseId");

                    b.HasIndex("MainCourseId");

                    b.ToTable("ClassroomMainCourse");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.CrossTables.ClassroomTeacher", b =>
                {
                    b.Property<Guid>("ClassroomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClassroomId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassroomTeacher");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.CrossTables.ParentStudent", b =>
                {
                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ParentId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("ParentStudent");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.CrossTables.StudentTeacher", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("StudentId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("StudentTeacher");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("StudentId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AttendanceStatus")
                        .HasColumnType("int");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedComputerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubCourseId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.Classroom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Capacity")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Grade")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<int>("Section")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.DiscontinuedStudent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedComputerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("DiscontinuedStudents");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte>("ExamNumber")
                        .HasColumnType("tinyint");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedComputerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubCourseId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.MainCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UpdatedComputerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("MainCourses");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.Parent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.Property<string>("UpdatedComputerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("WorkPhone")
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.Semester", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedComputerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClassroomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ContinuationStatus")
                        .HasColumnType("int");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("GPA")
                        .HasColumnType("float");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GraduatedSchool")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsPreRegistered")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<short?>("TotalAbsenceCount")
                        .HasColumnType("smallint");

                    b.Property<string>("UpdatedComputerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("09491450-00cd-4d6f-9025-f7e44bf25fc6"),
                            ContinuationStatus = 1,
                            CreatedComputerName = "Computer1",
                            CreatedDate = new DateTime(2024, 2, 8, 17, 25, 8, 155, DateTimeKind.Utc).AddTicks(6196),
                            CreatedIpAddress = "192.168.1.1",
                            FirstName = "Fatma",
                            GPA = 88.200000000000003,
                            Gender = 0,
                            GraduatedSchool = "Cumhuriyet İlkokulu",
                            IsPreRegistered = false,
                            LastName = "Yıldırım",
                            RegistrationNumber = "100-24"
                        },
                        new
                        {
                            Id = new Guid("fe825e65-ec62-4016-b881-6841f25dc2c9"),
                            ContinuationStatus = 1,
                            CreatedComputerName = "Computer2",
                            CreatedDate = new DateTime(2024, 2, 8, 17, 25, 8, 155, DateTimeKind.Utc).AddTicks(6238),
                            CreatedIpAddress = "192.168.1.2",
                            FirstName = "Mustafa",
                            GPA = 95.0,
                            Gender = 1,
                            GraduatedSchool = "Şehit Hasan Ortaokulu",
                            IsPreRegistered = true,
                            LastName = "Şahin",
                            RegistrationNumber = "101-24"
                        },
                        new
                        {
                            Id = new Guid("f32d8d9c-d26f-4df3-bc69-4558374f1c2d"),
                            ContinuationStatus = 1,
                            CreatedComputerName = "Computer3",
                            CreatedDate = new DateTime(2024, 2, 8, 17, 25, 8, 155, DateTimeKind.Utc).AddTicks(6241),
                            CreatedIpAddress = "192.168.1.3",
                            FirstName = "Zeynep",
                            GPA = 82.700000000000003,
                            Gender = 0,
                            GraduatedSchool = "Atatürk İlkokulu",
                            IsPreRegistered = false,
                            LastName = "Güler",
                            RegistrationNumber = "102-24"
                        },
                        new
                        {
                            Id = new Guid("2cbee62d-05b7-4864-b160-f555fcf5f1c3"),
                            ContinuationStatus = 1,
                            CreatedComputerName = "Computer4",
                            CreatedDate = new DateTime(2024, 2, 8, 17, 25, 8, 155, DateTimeKind.Utc).AddTicks(6243),
                            CreatedIpAddress = "192.168.1.4",
                            FirstName = "Ayşe",
                            GPA = 91.5,
                            Gender = 0,
                            GraduatedSchool = "Mehmet Akif İlkokulu",
                            IsPreRegistered = true,
                            LastName = "Kaya",
                            RegistrationNumber = "103-24"
                        },
                        new
                        {
                            Id = new Guid("1aa6ce29-ca43-4a18-ae79-59db39423062"),
                            ContinuationStatus = 1,
                            CreatedComputerName = "Computer5",
                            CreatedDate = new DateTime(2024, 2, 8, 17, 25, 8, 155, DateTimeKind.Utc).AddTicks(6254),
                            CreatedIpAddress = "192.168.1.5",
                            FirstName = "Ahmet",
                            GPA = 79.799999999999997,
                            Gender = 1,
                            GraduatedSchool = "Ali Rıza Ortaokulu",
                            IsPreRegistered = false,
                            LastName = "Arslan",
                            RegistrationNumber = "104-24"
                        },
                        new
                        {
                            Id = new Guid("d2613d5d-acd0-4b3b-a639-76694b52461e"),
                            ContinuationStatus = 1,
                            CreatedComputerName = "Computer6",
                            CreatedDate = new DateTime(2024, 2, 8, 17, 25, 8, 155, DateTimeKind.Utc).AddTicks(6257),
                            CreatedIpAddress = "192.168.1.6",
                            FirstName = "Emine",
                            GPA = 87.299999999999997,
                            Gender = 0,
                            GraduatedSchool = "Hacı Ahmet İlkokulu",
                            IsPreRegistered = true,
                            LastName = "Yılmaz",
                            RegistrationNumber = "105-24"
                        },
                        new
                        {
                            Id = new Guid("71917f1d-edd0-40b5-9d83-f8f1e469e406"),
                            ContinuationStatus = 1,
                            CreatedComputerName = "Computer7",
                            CreatedDate = new DateTime(2024, 2, 8, 17, 25, 8, 155, DateTimeKind.Utc).AddTicks(6260),
                            CreatedIpAddress = "192.168.1.7",
                            FirstName = "Mehmet",
                            GPA = 83.599999999999994,
                            Gender = 1,
                            GraduatedSchool = "Mustafa Kemal Ortaokulu",
                            IsPreRegistered = false,
                            LastName = "Kurt",
                            RegistrationNumber = "106-24"
                        },
                        new
                        {
                            Id = new Guid("248599da-7c4f-4f65-a014-01b097baf61f"),
                            ContinuationStatus = 1,
                            CreatedComputerName = "Computer8",
                            CreatedDate = new DateTime(2024, 2, 8, 17, 25, 8, 155, DateTimeKind.Utc).AddTicks(6274),
                            CreatedIpAddress = "192.168.1.8",
                            FirstName = "Fatih",
                            GPA = 94.200000000000003,
                            Gender = 1,
                            GraduatedSchool = "Cumhuriyet İlkokulu",
                            IsPreRegistered = true,
                            LastName = "Sarı",
                            RegistrationNumber = "107-24"
                        },
                        new
                        {
                            Id = new Guid("9a1a5c1f-1ff8-41c3-a480-6c68da0c979b"),
                            ContinuationStatus = 1,
                            CreatedComputerName = "Computer9",
                            CreatedDate = new DateTime(2024, 2, 8, 17, 25, 8, 155, DateTimeKind.Utc).AddTicks(6278),
                            CreatedIpAddress = "192.168.1.9",
                            FirstName = "Elif",
                            GPA = 78.900000000000006,
                            Gender = 0,
                            GraduatedSchool = "Fatih Sultan Mehmet Ortaokulu",
                            IsPreRegistered = false,
                            LastName = "Demir",
                            RegistrationNumber = "108-24"
                        },
                        new
                        {
                            Id = new Guid("a3057de0-c633-4ae8-9d53-b9c8ea3e5461"),
                            ContinuationStatus = 1,
                            CreatedComputerName = "Computer10",
                            CreatedDate = new DateTime(2024, 2, 8, 17, 25, 8, 155, DateTimeKind.Utc).AddTicks(6283),
                            CreatedIpAddress = "192.168.1.10",
                            FirstName = "Ali",
                            GPA = 88.700000000000003,
                            Gender = 1,
                            GraduatedSchool = "İsmet İnönü İlkokulu",
                            IsPreRegistered = true,
                            LastName = "Özdemir",
                            RegistrationNumber = "109-24"
                        },
                        new
                        {
                            Id = new Guid("83ea4c1c-57a5-445e-a87d-665b9116d259"),
                            ContinuationStatus = 1,
                            CreatedComputerName = "Computer11",
                            CreatedDate = new DateTime(2024, 2, 8, 17, 25, 8, 155, DateTimeKind.Utc).AddTicks(6290),
                            CreatedIpAddress = "192.168.1.11",
                            FirstName = "Sema",
                            GPA = 85.400000000000006,
                            Gender = 0,
                            GraduatedSchool = "Necmettin Erbakan Ortaokulu",
                            IsPreRegistered = false,
                            LastName = "Tekin",
                            RegistrationNumber = "110-24"
                        },
                        new
                        {
                            Id = new Guid("1ed224a6-e449-4349-8213-30154b320f78"),
                            ContinuationStatus = 1,
                            CreatedComputerName = "Computer12",
                            CreatedDate = new DateTime(2024, 2, 8, 17, 25, 8, 155, DateTimeKind.Utc).AddTicks(6292),
                            CreatedIpAddress = "192.168.1.12",
                            FirstName = "Can",
                            GPA = 92.099999999999994,
                            Gender = 1,
                            GraduatedSchool = "Abdullah Gül İlkokulu",
                            IsPreRegistered = true,
                            LastName = "Aydın",
                            RegistrationNumber = "111-24"
                        });
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.SubCourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("MainCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("WeeklyHour")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainCourseId");

                    b.ToTable("SubCourses");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedComputerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("MainCourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedComputerName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedIpAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("MainCourseId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.CrossTables.ClassroomMainCourse", b =>
                {
                    b.HasOne("SchoolAutomationProject.Domain.Entities.UniqueTables.Classroom", "Classroom")
                        .WithMany("ClassroomMainCourses")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAutomationProject.Domain.Entities.UniqueTables.MainCourse", "MainCourse")
                        .WithMany("ClassroomMainCourses")
                        .HasForeignKey("MainCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("MainCourse");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.CrossTables.ClassroomTeacher", b =>
                {
                    b.HasOne("SchoolAutomationProject.Domain.Entities.UniqueTables.Classroom", "Classroom")
                        .WithMany("ClassroomTeachers")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAutomationProject.Domain.Entities.UniqueTables.Teacher", "Teacher")
                        .WithMany("ClassroomTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.CrossTables.ParentStudent", b =>
                {
                    b.HasOne("SchoolAutomationProject.Domain.Entities.UniqueTables.Parent", "Parent")
                        .WithMany("ParentStudents")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAutomationProject.Domain.Entities.UniqueTables.Student", "Student")
                        .WithMany("ParentStudents")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.CrossTables.StudentTeacher", b =>
                {
                    b.HasOne("SchoolAutomationProject.Domain.Entities.UniqueTables.Student", "Student")
                        .WithMany("StudentTeachers")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAutomationProject.Domain.Entities.UniqueTables.Teacher", "Teacher")
                        .WithMany("StudentTeachers")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.Achievement", b =>
                {
                    b.HasOne("SchoolAutomationProject.Domain.Entities.UniqueTables.Semester", "Season")
                        .WithMany("Achievements")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAutomationProject.Domain.Entities.UniqueTables.Student", "Student")
                        .WithMany("Achievement")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.Attendance", b =>
                {
                    b.HasOne("SchoolAutomationProject.Domain.Entities.UniqueTables.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAutomationProject.Domain.Entities.UniqueTables.SubCourse", "SubCourse")
                        .WithMany()
                        .HasForeignKey("SubCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("SubCourse");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.DiscontinuedStudent", b =>
                {
                    b.HasOne("SchoolAutomationProject.Domain.Entities.UniqueTables.Student", "Student")
                        .WithOne("DiscontinuedStudent")
                        .HasForeignKey("SchoolAutomationProject.Domain.Entities.UniqueTables.DiscontinuedStudent", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.Grade", b =>
                {
                    b.HasOne("SchoolAutomationProject.Domain.Entities.UniqueTables.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolAutomationProject.Domain.Entities.UniqueTables.SubCourse", "SubCourse")
                        .WithMany("Grades")
                        .HasForeignKey("SubCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("SubCourse");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.Student", b =>
                {
                    b.HasOne("SchoolAutomationProject.Domain.Entities.UniqueTables.Classroom", "Classroom")
                        .WithMany("Students")
                        .HasForeignKey("ClassroomId");

                    b.Navigation("Classroom");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.SubCourse", b =>
                {
                    b.HasOne("SchoolAutomationProject.Domain.Entities.UniqueTables.MainCourse", "MainCourse")
                        .WithMany("SubCourses")
                        .HasForeignKey("MainCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCourse");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.Teacher", b =>
                {
                    b.HasOne("SchoolAutomationProject.Domain.Entities.UniqueTables.MainCourse", "MainCourse")
                        .WithMany("Teachers")
                        .HasForeignKey("MainCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCourse");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.Classroom", b =>
                {
                    b.Navigation("ClassroomMainCourses");

                    b.Navigation("ClassroomTeachers");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.MainCourse", b =>
                {
                    b.Navigation("ClassroomMainCourses");

                    b.Navigation("SubCourses");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.Parent", b =>
                {
                    b.Navigation("ParentStudents");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.Semester", b =>
                {
                    b.Navigation("Achievements");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.Student", b =>
                {
                    b.Navigation("Achievement");

                    b.Navigation("Attendances");

                    b.Navigation("DiscontinuedStudent")
                        .IsRequired();

                    b.Navigation("Grades");

                    b.Navigation("ParentStudents");

                    b.Navigation("StudentTeachers");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.SubCourse", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("SchoolAutomationProject.Domain.Entities.UniqueTables.Teacher", b =>
                {
                    b.Navigation("ClassroomTeachers");

                    b.Navigation("StudentTeachers");
                });
#pragma warning restore 612, 618
        }
    }
}
