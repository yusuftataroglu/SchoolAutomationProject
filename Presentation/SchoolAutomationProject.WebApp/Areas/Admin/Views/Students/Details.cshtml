@model ReadStudentViewModel
@inject IAttendanceReadRepository attendanceReadRepository

@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="card mb-4">
    <div class="card-header d-flex align-items-center">
        <i class="fas fa-table me-1 me-2"></i>
        <h3>@ViewData["TableTitle"]</h3>
    </div>

    <div class="card-body">
        <table class="table table-hover table-bordered">

            <thead>
                <tr>
                    @foreach (var columnTitle in ViewData["CustomColumnTitles"] as List<string>)
                    {
                        <th>@columnTitle</th>
                    }
                    @foreach (var commonColumnTitle in ViewData["CommonColumnTitles"] as List<string>)
                    {
                        <th>@commonColumnTitle</th>
                    }
                </tr>
            </thead>

            <tbody>
                <tr>
                    @foreach (var customProperty in ViewData["CustomProperties"] as List<string>)
                    {
                        <td>
                            @if (customProperty == "Classroom" && Model.Classroom != null)
                            {
                                if (Model.Classroom.IsActive)
                                {
                                <badge class="badge bg-info">@Model.Classroom.Name</badge>
                                }
                                else
                                {
                                    <badge class="badge bg-info">Silinmiş Sınıf</badge>
                                }
                            }

                            else if (customProperty == "Parent" && Model.Parent != null)
                            {
                               if (Model.Parent.IsActive)
                                {
                                <badge class="badge bg-success">@Model.Parent.FirstName @Model.Parent.LastName</badge>
                                }
                                else
                                {
                                    <badge class="badge bg-success">Silinmiş Veli</badge>
                                }
                            }

                            else if (customProperty == "Achievements" && Model.Achievements != null)
                            {
                                foreach (var achievement in Model.Achievements)
                                {
                                    if (achievement.IsActive)
                                    {
                                    <badge class="badge bg-success">@achievement.Type</badge>
                                    }
                                    else
                                    {
                                        <badge class="badge bg-success">Silinmiş Belge</badge>
                                    }
                                }
                            }
                            else if (customProperty == "TotalAbsenceCount")
                            {
                            Model.TotalAbsenceCount = Convert.ToInt16(attendanceReadRepository.GetWhere(x => x.StudentId == Model.Id && x.AttendanceStatus == AttendanceStatus.Yok && x.IsActive).Count());
                                @Model.TotalAbsenceCount
                        }
                            else
                            {
                                <span>@Model.GetType().GetProperty(customProperty).GetValue(Model)</span>
                            }
                        </td>
                    }

                    @foreach (var commonProperty in ViewData["CommonProperties"] as List<string>)
                    {
                        <td>@Model.GetType().GetProperty(commonProperty).GetValue(Model)</td>
                    }
                </tr>

            </tbody>
        </table>
    </div>
</div>
